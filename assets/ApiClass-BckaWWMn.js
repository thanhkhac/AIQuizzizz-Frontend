import{y as t}from"./index-CNC2148x.js";const l={CREATE:"Class",GET_ALL_BY_LIMIT:"Class",GET_ALL_EXAM_BY_LIMIT:"Class/{ClassId}/Tests",GET_ALL_STUDENT_BY_LIMIT:"Class/{ClassId}/Students",GET_ALL_QS_BY_LIMIT:"Class/{ClassId}/QuestionSets",GET_BY_ID:"Class/{ClassId}",JOIN_CLASS:"Class/Students",DELETE_CLASS:"Class/{ClassId}",DELETE_CLASS_MEMBER:"Class/{ClassId}/Members/{UserId}",UPDATE_CLASS_MEMBER_POSITION:"Class/{ClassId}/Members/{UserId}",DELETE_CLASS_QUESTION_SET:"Class/{ClassId}/QuestionSets/{QuestionSetId}",GET_INVITATION_CODE:"Class/{ClassId}/Invitation-Code"};class I{async Create(e){return await t.post(`${l.CREATE}`,e)}async JoinClass(e){return await t.post(`${l.JOIN_CLASS}`,e)}async GetAllByLimit(e){return await t.get(`${l.GET_ALL_BY_LIMIT}`,{params:{pageNumber:e.pageNumber||1,pageSize:e.pageSize||10,name:e.name||"",shareMode:e.shareMode||""}})}async GetById(e){const s=l.GET_BY_ID.replace("{ClassId}",e);return await t.get(s)}async GetAllExamByLimit(e,s){const a=l.GET_ALL_EXAM_BY_LIMIT.replace("{ClassId}",e);return await t.get(a,{params:{pageNumber:s.pageNumber||1,pageSize:s.pageSize||10,testName:s.testName||"",status:s.status||""}})}async GetAllQSByLimit(e,s){const a=l.GET_ALL_QS_BY_LIMIT.replace("{ClassId}",e);return await t.get(a,{params:{pageNumber:s.pageNumber||1,pageSize:s.pageSize||10,name:s.name||""}})}async GetAllStudentByLimit(e,s){const a=l.GET_ALL_STUDENT_BY_LIMIT.replace("{ClassId}",e);return await t.get(a,{params:{pageNumber:s.pageNumber||1,pageSize:s.pageSize||10,keyword:s.keyword||"",fieldName:s.fieldName||""}})}async Delete(e){const s=l.DELETE_CLASS.replace("{ClassId}",e);return await t.delete(s)}async DeleteClassMember(e,s){const a=l.DELETE_CLASS_MEMBER.replace("{ClassId}",e).replace("{UserId}",s);return await t.delete(a)}async UpdateClassMemberPosition(e,s,a){const r=l.UPDATE_CLASS_MEMBER_POSITION.replace("{ClassId}",e).replace("{UserId}",s);return await t.patch(r,null,{params:{position:a}})}async DeleteQuestionSetFromClass(e,s){const a=l.DELETE_CLASS_QUESTION_SET.replace("{ClassId}",e).replace("{QuestionSetId}",s);return await t.delete(a)}async GetInivationCode(e){const s=l.GET_INVITATION_CODE.replace("{ClassId}",e);return await t.get(s)}async CreateNewInvitation(e,s){const a=l.GET_INVITATION_CODE.replace("{ClassId}",e);return await t.post(a)}}const E=new I;export{E as A};
