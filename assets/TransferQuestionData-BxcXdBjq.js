class r{transformResponseToRequest(t){const c=t.questionData.matching?t.questionData.matching.leftItems.map(i=>{const h=t.questionData.matching.matches.find(a=>a.leftId===i.id),l=h?t.questionData.matching.rightItems.find(a=>a.id===h.rightId):null;return{id:i.id,leftItem:i.text,rightItem:(l==null?void 0:l.text)||""}}):[];return{id:t.id,type:t.type,questionText:t.questionText,questionHTML:t.questionText,explainText:t.explainText,score:t.score,multipleChoices:t.questionData.multipleChoice||[],matchingPairs:c,orderingItems:t.questionData.ordering||[],shortAnswer:t.questionData.shortText||""}}transformRequestToResponse(t,c){const i=t.matchingPairs.map(a=>({id:a.id,text:a.leftItem})),h=t.matchingPairs.filter(a=>a.rightItem).map((a,m)=>({id:`right_${m}`,text:a.rightItem})),l=t.matchingPairs.filter(a=>a.rightItem).map((a,m)=>({leftId:a.id,rightId:`right_${m}`}));return{id:t.id,type:t.type,questionSetId:c,textFormat:"HTML",questionText:t.questionText,explainText:t.explainText,score:t.score,scoreGraded:t.score,correctMultipleChoiceCount:t.multipleChoices.filter(a=>a.isAnswer).length,questionData:{multipleChoice:t.multipleChoices.length>0?t.multipleChoices:null,matching:t.matchingPairs.length>0?{leftItems:i,rightItems:h,matches:l}:null,ordering:t.orderingItems.length>0?t.orderingItems:null,shortText:t.shortAnswer}}}}const e=new r;export{e as T};
